=title ref - What kind of reference is this variable?
=timestamp 2014-03-26T19:50:01
=indexes ref, SCALAR, ARRAY, HASH, CODE, REF, GLOB, LVALUE, FORMAT, IO, VSTRING, Regexp
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

The <hl>ref()</hl> function will return the type of the reference it got as a parameter. If no parameter was supplied, it
will return the reference type of <a href="/the-default-variable-of-perl">$_, the default variable of Perl</a>.

According to the documentation, the possible return values of the <hl>ref()</hl> function are:

<code>
SCALAR
ARRAY
HASH
CODE
REF
GLOB
LVALUE
FORMAT
IO
VSTRING
Regexp
</code>

Let's see when do we get such values:

=abstract end


<h2>Simple scalars</h2>

If we pass a simple scalar variable to the <hl>ref()</hl> function containing
<a href="/undef-and-defined-in-perl">undef</a>, a string, or a number, the <hl>ref()</hl>
function will return the empty string:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $nothing;
my $string = 'abc';
my $number = 42;

say 'nothing:    ', ref $nothing;   #
say 'string:     ', ref $string;    #
say 'number:     ', ref $number;    #
say 'nothing:    ', defined ref $nothing;   # 1
say 'string:     ', defined ref $string;    # 1
say 'number:     ', defined ref $number;    # 1
</code>


<h2>Reference to SCALAR</h2>

If we take the reference to either of the simple scalars, even the one holding <hl>undef</hl>,
the <hl>ref()</hl> function will return the string <hl>SCALAR</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $nothing;
my $string = 'abc';
my $number = 42;

my $nothingref = \$nothing;
my $stringref  = \$string;
my $numberref  = \$number;

say 'nothingref: ', ref $nothingref; # SCALAR
say 'stringref:  ', ref $stringref;  # SCALAR
say 'numberref:  ', ref $numberref;  # SCALAR
</code>

<h2>Reference to ARRAY and HASH</h2>

If we pass an array or a hash to the <hl>ref()</hl> it will return an empty string,
but if we pass a reference to an array, or a reference to a hash, it will return
<hl>ARRAY</hl>, or <hl>HASH</hl> respectively.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my @arr = (2, 3);
my %h = (
    answer => 42,
);

my $arrayref  = \@arr;
my $hashref   = \%h;

say 'array:      ', ref @arr;       # 
say 'hash:       ', ref %h;         #
say 'arrayref:   ', ref $arrayref;  # ARRAY
say 'hashref:    ', ref $hashref;   # HASH
</code>

<h2>Reference to CODE</h2>

Passing a reference to a subroutine to the <hl>ref()</hl> function
will result in the string <hl>CODE</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

sub answer {
     return 42;
}
my $subref    = \&answer;

say 'subref:     ', ref $subref;    # CODE
</code>

<h2>A reference to a reference: REF</h2>

If we have a reference to a reference, and we pass that to the <hl>ref()</hl> function,
it will return the string <hl>REF</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $str = 'abc';
my $strref = \$str;
my $refref    = \$strref;
say 'strref:     ', ref $strref;    # SCALAR
say 'refref:     ', ref $refref;    # REF

say 'refrefref:  ', ref \$refref;   # REF
</code>

Even if we have a reference to a reference to a reference..... that will be still <hl>REF</hl>.

<h2>Reference to a Regex</h2>

The <hl>qr</hl> operator returns a pre-compiled regular expression, or if you ask the <hl>ref()</hl> function,
then <hl>qr</hl> returns a reference to a <hl>Regexp</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $regex = qr/\d/;
my $regexref = \$regex;
say 'regex:      ', ref $regex;     # Regexp

say 'regexref:   ', ref $regexref;  # REF
</code>

Of course if we take a reference to the <hl>Regex</hl> reference we are back to the <hl>REF</hl> as above.


<h2>Reference to GLOB</h2>

A file-handle created by the <hl>open</hl> function is a <hl>GLOB</hl>.

<code lang="perl">
use strict;
use warnings;
use 5.010;

open my $fh, '<', $0 or die;
say 'filehandle: ', ref $fh;        # GLOB
</code>

<h2>Reference to a FORMAT</h2>

I think the <a href="https://metacpan.org/pod/perlform">format</a> function of Perl fell out of favor by
most of the Perl developers and you can rarely see it in the wild. I could not even figure out how
to take a reference to it in a simple way, but let me leave the example here as it is. You probably
don't need to worry about it.

<code lang="perl">
use strict;
use warnings;
use 5.010;

format fmt =
   Test: @<<<<<<<< @||||| @>>>>>
.
say 'format:     ', ref *fmt{FORMAT};  # FORMAT
</code>


<h2>Reference to VSTRING</h2>

Version string staring with the letter <hl>v</hl>, are another rare sighting,
even though they are more used than formats:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $vs = v1.1.1;
my $vsref = \$vs;
say 'version string ref: ', ref $vsref;  # VSTRING
</code>


<h2>Reference to LVALUE</h2>

Lvalue functions are functions that can appear on the left hand side of an assignment.
For example if you would like to change the content of a string you can 
use the <a href="/string-functions-length-lc-uc-index-substr">4-parameter version of substr</a>,
the 4th parameter being the replacement string, or you can assign that string to the
<a href="/lvalue-substr">3-parameter version of substr</a>.


Let's see what happens if we take a reference of a regular, 4-parameter substr call:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'The black cat climbed the green tree';
my $nolv = \ substr $text, 14, 7, 'jumped from';
say 'not lvalue:  ', ref $nolv;  # SCALAR
say $nolv;    # SCALAR(0x7f8d190032b8)
say $$nolv;   # climbed
say $text;    # The black cat jumped from the green tree

$$nolv = 'abc';
say $text;    # The black cat jumped from the green tree
</code>

The value assigned to the <hl>$nolv</hl> variable is a regular reference to a scalar containing
the value returned by the <hl>substr</hl> function. The word 'climbed' in this case.

On the other hand, if we take a reference to a 3-parameter substr call (or 2-parameter for that matter),
then the returned value that gets assigned to <hl>$lv</hl> below,
is a reference to an <hl>LVALUE</hl>. If we de-reference it <hl>say $$lv;</hl>,
we can see the original value (the string 'climbed') in it.

If we assign to that dereference <hl>$$lv = 'jumped from';</hl> that will change
the content of <hl>$$lv</hl>, but  that will also replace the selected part in <hl>$text</hl>, the original string.

We can repeated this assignment: <hl>$$lv = 'abc';</hl> that will change the original string again.

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'The black cat climbed the green tree';
my $lv = \ substr $text, 14, 7;
say 'lvalue:      ', ref $lv;    # LVALUE
say $lv;                         # LVALUE(0x7f8fbc0032b8)
say $$lv;                        # climbed
say $text;                       # The black cat climbed the green tree

$$lv = 'jumped from';
say $lv;                         # LVALUE(0x7f8fbc0032b8)
say $$lv;                        # jumped from
say $text;                       # The black cat jumped from the green tree

$$lv = 'abc';
say $$lv;                        # abc
say $text;                       # The black cat abc the green tree
</code>


<h2>Blessed references</h2>

As <a href="/constructor-and-accessors-in-classic-perl-oop">explained elsewhere</a>,
in the <a href="/getting-started-with-classic-perl-oop">classic object oriented system</a> of Perl
the <hl>bless</hl> function is used to connect a hash reference to a namespace. (Actually
it is the same in <a href="/moo">Moo</a> and <a href="/moose">Moose</a>, but there it is
mostly hidden from our eyes.)

Anyway, if we call the <hl>ref()</hl> on a blessed reference, it will return the namespace it has been
blessed into:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $r = {};
say ref $r;              # HASH
bless $r, 'Some::Name';
say ref $r;              # Some::Name
</code>

The same even if the underlying reference is not a hash reference:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $r = [];
say ref $r;               # ARRAY
bless $r, 'Class::Name';
say ref $r;               # Class::Name
</code>

<h2>More</h2>

The documentation of <a href="https://metacpan.org/pod/perlref">perlref</a> has a lot more details about the <hl>ref</hl>
function and about references in general.

<h2>Comments</h2>

In reference to "Blessed references" it is important to note; that any reference can be blessed in a package not just hash references.
