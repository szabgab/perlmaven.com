=title Scalar value ... better written as ...
=timestamp 2018-11-11T12:00:01
=indexes @_
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

If you <a href="/always-use-warnings">use warnings</a> in your Perl code you might encounter this strange warning. It is especially strange as the code seems to be working as expected.
Nevertheless this is one of the <a href="/common-warnings-and-error-messages">common warnings in Perl</a>. You'd better understand it and get rid of it.

Without disabling warnings.

=abstract end

<h2>Access element of an array</h2>

In this most simple example we have an array called <hl>@names</hl> and we try to print the first element in the array by accessing <hl>@names[0];</hl>.

<include file="examples/array_index1.pl">

The output looks like this:

<code>
Scalar value @names[0] better written as $names[0] at array_index1.pl line 6.
Foo
</code>

So we get the correct value printed, but we also get a warning.

In Perl, when you talk about a whole <a href="/perl-arrays">array</a> or about a <a href="/array-slices">slice of an array</a> you use the <hl>@</hl> sigil,
but when you try to access a single <a href="/perl-arrays">element of an array</a> you need to use the <hl>$</hl> sigil.
So the proper way to access the first element of the <hl>@names</hl> array is to use <hl>$names[0]</hl>.

<h2>Array element in dereference</h2>

In the second example we have slightly more complex expression, 

<include file="examples/array_index2.pl">

Running this code we only get the warning but no output. The function does not even get executed, the warning is already emitted.

<code>
Scalar value @_[0] better written as $_[0] at array_index2.pl line 5.
</code>

Here too, instead of <hl>@_[0]</hl> we should have written <hl>$_[0]</hl>. Not to be confused with <a href="/the-default-variable-of-perl">$_ the default variable of Perl</a>
that does not have a square-bracket nor curly braces after it.

<h2>Correct way to access elements of an array in Perl</h2>

The correct way can be seen in this code:

<include file="examples/array_index.pl">

<h2>Comments</h2>

I've always viewed it as telling perl what I want returned. If I just want a single element of an array then I tell Perl I wan a scalar, $. If I want the whole array or a slice I tell Perl I want an array, @. And likewise if I want the whole hash...

