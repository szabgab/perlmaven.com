=title  Private Member Data shouldn't be accessed directly - encapsulation violation
=timestamp 2016-06-01T09:30:01
=indexes Perl::Critic, ValuesAndExpressions::ProhibitAccessOfPrivateData
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

<a href="/perl-critic">Perl::Critic</a> has many policies, but there are several additional modules that
provide even more policies. For example the <a href="https://metacpan.org/release/Perl-Critic-Nits">Perl-Critic-Nits</a>
distribution provides the 
<a href="https://metacpan.org/pod/Perl::Critic::Policy::ValuesAndExpressions::ProhibitAccessOfPrivateData">ValuesAndExpressions::ProhibitAccessOfPrivateData</a>
policy that if violated would generate a message like this:

<pre>
Private Member Data shouldn't be accessed directly at ... 
Accessing an objects data directly breaks encapsulation and should be avoided.  Example: $object->{ some_key }.
</pre>

=abstract end

The policy tries to get us use

<code lang="perl">
$obj->attribute;
</code>

instead of 

<code lang="perl">
$obj->{attribute};
</code>

Unfortunately the this generates a lot of false positive reports.

I think the most problematic part is that Perl::Critic, being a static analyzer, cannot know
if <hl>$h</hl> in a code snippet like this: <hl>$h->{name}</hl> is going to be a blessed object
or a plain hash reference. So the policy will report violations for plain hash references as well.

Another issue might be in <a href="/getting-started-with-classic-perl-oop">classic OOP</a> where
at least the accessors will need to access the attributes as elements of a hash reference.

<h2>Example for plain hash reference</h2>

See this example:

<include file="examples/access_hash_ref_element.pl">

If we run

<code>
perlcritic --single-policy ValuesAndExpressions::ProhibitAccessOfPrivateData access_hash_ref_element.pl 
</code>

we get:

<pre>
Private Member Data shouldn't be accessed directly at line 9, column 5.
Accessing an objects data directly breaks encapsulation and should be avoided.  Example: $object->{ some_key }.  (Severity: 5)
</pre>

You can avoid the policy violation report by putting a comment on the line where you know it is
ok to access the element of a hash reference:

<code>
say $h->{name}; ## no critic (ValuesAndExpressions::ProhibitAccessOfPrivateData)
</code>

<h2>Conclusion</h2>

If the code is primarily object oriented, especially if it is based on <a href="/moo">Moo</a> or
<a href="/moose">Moose</a>, where you don't write your own accessors, then this policy can catch
code that violates the encapsulation.

<h3>Screenshots</h3>

<img src="/img/shots/private-member-data-shouldnt-be-accessed-directly.png" alt="Accessing private member data directly" >

<h2>Comments</h2>

Sometime is use the following to filter out those messages. At leas when I want to concentrate on the other issues perlcritic finds.

perlcritic --exclude ValuesAndExpressions::ProhibitAccessOfPrivateData my_file.pm

Thanks for the write up Gabor.


