=title $_ the default variable of Perl
=timestamp 2012-08-14T20:41:51
=indexes Perl, $_, scalar, default, variable, topic
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

There is a strange scalar variable called <hl>$_</hl> in Perl, which is the
<hl>default variable</hl>, or in other words the <b>topic</b>.

In Perl, several functions and operators use this variable as a default,
in case no parameter is explicitly used. In general, I'd say you should <b>NOT</b>
see <hl>$_</hl> in real code. I think the whole point of <hl>$_</hl> is that you don't
have to write it explicitly.

Well, except when you do.

=abstract end

Having a default variable is a very powerful idea, but using it
incorrectly can reduce the readability of your code.

Check out this script:

<code lang="perl">
use strict;
use warnings;
use v5.10;

while (<STDIN>) {
   chomp;
   if (/MATCH/) {
      say;
   }
}
</code>

This is exactly the same as:

<code lang="perl">
use strict;
use warnings;
use v5.10;

while ($_ = <STDIN>) {
   chomp $_;
   if ($_ =~ /MATCH/) {
      say $_;
   }
}
</code>

I would never write the second one, and I'd probably write the first one only
in a very small script, or in a very tight part of the code.

Maybe not even there.

As you can see, in a <hl>while</hl> loop, when you read from a file handle,
even if that's the standard input, if you don't assign it explicitly
to any variable, the line that was read will be assigned to <hl>$_</hl>.

<hl>chomp()</hl> defaults to work on this variable, if no parameter was given.

Regular expression matching can be written without an explicit string,
and even without the <hl>=~</hl> operator. If written that way, it will work on the
content of <hl>$_</hl>.

Finally <hl>say()</hl>, just as <hl>print()</hl>, would print the content
of <hl>$_</hl>, if no other parameter was given.

<h2>split</h2>

The second parameter of <hl>split</hl> is the string to be cut in pieces.
If no second parameter is given, split will cut up the content of <hl>$_</hl>.

<code lang="perl">
my @fields = split /:/;
</code>

<h2>foreach</h2>

If we don't supply the name of the iterator variable to <hl>foreach</hl>,
it will use <hl>$_</hl>.

<code lang="perl">
use strict;
use warnings;
use v5.10;

my @names = qw(Foo Bar Baz);
foreach (@names) {   # puts values in $_
    say;
}
</code>

<h2>Assignment in condition</h2>

There are some cases when we implicitly use <hl>$_</hl> by mistake.

Some experts might use this kind of code deliberately,
but when this is written by a newbie, or a mere mortal, it is just a bug.

<code lang="perl">
if ($line = /regex/) {
}
</code>

You see, instead of the regex operator: <hl>=~</hl> we used here the plain assignment operator: <hl>=</hl>.
This is, in fact the same as

<code lang="perl">
if ($line = $_ =~ /regex/) {
}
</code>

It takes the content of <hl>$_</hl>, executes the pattern matching on it,
and assigns the result to <hl>$line</hl>. Then checks if the content of $line is true or false.

<h2>Explicit $_</h2>

I mentioned earlier I recommend <b>not</b> using <hl>$_</hl> explicitly. Sometimes I see people writing code like this:

<code lang="perl">
while (<$fh>) {
  chomp;
  my $prefix = substr $_, 0, 7;
}
</code>

I think, once you use a statement in perl that forces you to explicitly write out <hl>$_</hl>,
such as <hl>substr</hl> in our case, you should go all the way and use a more meaningful name.
Even if that means more typing:

<code lang="perl">
while (my $line = <$fh>) {
  chomp $line;
  my $prefix = substr $line, 0, 7;
}
</code>

Another bad example I often see:

<code lang="perl">
while (<$fh>) {
   my $line = $_;
   ...
}
</code>

This probably happens to people who do not understand the interaction between
the <hl>while</hl> statement, the read operator on the file handle and <hl>$_</hl>.

This could be written in a more simple way directly assigning to the <hl>$line</hl>
variable.

<code lang="perl">
while (my $line = <$fh>) {
   ...
}
</code>

<h2>List of uses of $_</h2>

I've started to put together a list of places that default to <b>$_</b>:

<ul>
   <li><a href="/ord">ord</a></li>
</ul>

<h2>Exceptions</h2>

There are several cases where you can't really avoid, and you have to use <hl>$_</hl>
explicitly. These are the <a href="/filtering-values-with-perl-grep">grep</a>
and <a href="/transforming-a-perl-array-using-map">map</a> function, and the
other similar ones, such as <a href="/filtering-values-with-perl-grep">any</a>.

<h2>Comments</h2>

short and up to the point description

<hr>

I use `foreach (my $inputLine = <stdin>)` and B::Lint still complains `Implicit use of $_ in foreach`.

That should be while and not foreach.
<hr>

I'm learning Perl slowly from your website, I'm new to scripting
I have this line in one of the script "print "$number\t", $name, "\n" if($number =~ /^[0-9]/) ;" when I run it prints the results on screen all good, but I want to modify it to print the results to a file ( results.csv or results.txt)
I would really appreciated if you can help as this is my first month of scripting

foreach( @numberCsv ){
my $number=$$_[0];
my $name=$names{ $classifier->($number) };
print "$number\t", $name, "\n" if($number =~ /^[0-9]/) ;
}



You need open a file for writing https://perlmaven.com/begin... and then print to the filehandle instead of just print.

You might also want to use a named variable instead of $_
foreach my $row (@numberCsV) {
}





