=title Finding files in a directory tree using Perl
=timestamp 2013-09-09T23:30:00
=indexes Path::Iterator::Rule, recursive, directory tree
=status show
=author szabgab
=comments_disqus_enable 0


=abstract start

There are several ways to traverse a directory tree in Perl. It can be done with the function
calls <hl>opendir</hl> and <hl>readdir</hl> that are part of the Perl language.
It can be done using the <hl>File::Find</hl> module that comes with Perl.

In this article we'll look at <a href="https://metacpan.org/pod/Path::Iterator::Rule">Path::Iterator::Rule</a>.

=abstract end

<h2>Overview: The Rule, all and iter</h2>

In order to use the module we need two things:

<ol>
<li>First we create a Path::Iterator::Rule object representing a set of rules.</li>
<li>Then we can use that object to list the file-system elements in a certain list of directories.</li>
</ol>

The first step is to create the rules:

<code lang="perl">
use Path::Iterator::Rule;
my $rule = Path::Iterator::Rule->new;
</code>

This rule object has no restrictions yet, we'll see those later. It will return every
item in the file-system. Once we have the <hl>$rule</hl> object, we use that to traverse the directories.
The traversing can be done in two ways:

1. The <hl>all</hl> method will traverse the given directories and return a list of file-system
elements: <hl>my @files = $rule->all( @dirs )</hl>.
We then probably go over the list using a <hl>for</hl> loop:

<code lang="perl">
for my $file ( $rule->all( @dirs ) ) {
    say $file;
}
</code>

2. The <hl>iter</hl> method will return an iterator. <hl>my $it = $rule->iter( @dir );</hl>.
Then we can retrieve the file-system elements one-by-one by
dereferencing the iterator code-reference:

<code lang="perl">
my $it = $rule->iter( @dir );
while ( my $file = $it->() ) {
    say $file;
}
</code>

(<hl>$it</hl> is a reference to a subroutine. With the <hl>$it->()</hl> syntax we call the underlying
subroutine without passing to it any parameter.)

Calling <hl>all</hl> will ensure that changes to the directory structure during the <hl>for-loop</hl>
won't alter the result. If we are processing a large directory structure, however, this requires a long
up-front time spent collecting the items, and a much bigger memory allocation,
than in the case of the <hl>iter</hl> method.

<h2>Basic examples</h2>

Let's see two basic examples for the above two cases. We expect the user to
provide the list of directories on the command line. Hence we pass <hl>@ARGV</hl>
as the list of directories, to the <hl>all</hl> and <hl>iter</hl> methods.

The first example uses the <hl>all</hl> method to collect all the
matching file-system elements in the memory:

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Path::Iterator::Rule;

die "Usage: $0 DIRs" if not @ARGV;

my $rule = Path::Iterator::Rule->new;

for my $file ( $rule->all( @ARGV ) ) {
    say $file;
}
</code>

In the second example, we use the <hl>iter</hl> method to create an iterator,
and then call it repeatedly to get all the matching file-system elements:

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Path::Iterator::Rule;

die "Usage: $0 DIRs" if not @ARGV;

my $rule = Path::Iterator::Rule->new;

my $it = $rule->iter( @ARGV );
while ( my $file = $it->() ) {
    say $file;
}
</code>

<h2>Rules</h2>

After seeing the basics, the really interesting part is setting the rules. So let's see a few of them:

<h3>size</h3>

<code lang="perl">
$rule->size("> 1000");
</code>

means only find files larger than 1000 bytes.

The same could be expressed as

<code lang="perl">
$rule->size("> 1k");
</code>

(1k = 1000, and 1ki = 1024, in accordance with the
<a href="http://physics.nist.gov/cuu/Units/binary.html">IEC standard</a> as implemented
by <a href="https://metacpan.org/pod/Number::Compare">Number::Compare</a>.)

Similarly one could write

<code lang="perl">
$rule->size("< 1000");
</code>

to find the smaller files.

We can even combine the two:

<code lang="perl">
$rule->size("< 1024")->size("> 1000");
</code>

In general we can <b>stack rules on the other</b>

<h3>file-name</h3>

<code lang="perl">
$rule->name("*.xml");
</code>

will only find files with xml extension and

<code lang="perl">
$rule->name("*.pm");
</code>

will only find files with pm extension.

Because it is a Perl module, for the latter we even have a special rule:

<code lang="perl">
$rule->perl_module;
</code>

will also match the pm files only.

Of course if we would like to match any Perl file, we can use the
appropriate rule:

<code lang="perl">
$rule->perl_file;
</code>

<h3>negative rules</h3>

What if we want to find all the non-pm files?
First we create a rule that means "not pm file",
then we can use this rule in a <b>boolean rule-expression</b>:

<code lang="perl">
my $no_pm_rule = $rule->clone->name("*.pm");
$rule->not( $no_pm_rule );
</code>

Please note, we have to <hl>clone</hl> the rule, our rule would
be both <b>only match pm</b> and <b>only match not pm</b>. That would be an empty set.

If we don't intend to reuse it later, we don't even need to save the new rule in
a variable. We can write this:

<code lang="perl">
$rule->not( $rule->clone->name("*.pm") );
</code>

Even better, most of the rules already have a negative version so we can write this:

<code lang="perl">
$rule->not_name("*.pm");
</code>

<h3>directory depth</h3>

All the elements that are at least 4 subdirectory deep from the one passed to the
<hl>iter</hl> method:

<code lang="perl">
$rule->min_depth(4);
</code>

Don't go deeper than 3 subdirectories:

<code lang="perl">
$rule->max_depth(3);
</code>

If we pass 0 to <hl>max_depth</hl> we will get only the directories we passed to <hl>iter</h>.
If <hl>max_depth</hl> is 1, we will get the immediate content of those directories.

<h3>skipping directories</h3>

If you are familiar with <a href="http://beyondgrep.com/">ack</a>, you know it automatically skips the
<b>.git</b> directory.
How can we achieve the same?
We create a cloned rule that matches the ".git" and then we tell our main rule to <hl>skip</hl> those matches

<code lang="perl">
$rule->skip( $rule->clone->name(".git") );
</code>

Of course, because skipping directories is a very common task, it has its own rule:

<code lang="perl">
$rule->skip_dirs(".git");
</code>

But, then again, skipping the .git directory is really, really common, so it has its own rule:

<code lang="perl">
$rule->skip_git;
</code>

Of course ack skips the meta directories of all the version control system, so we should be able to do
that too:

<code lang="perl">
$rule->skip_vcs;
</code>

(See the <a href="https://metacpan.org/pod/Path::Iterator::Rule">documentation</a> to understand the specifics.)

If you are not familiar with <a href="http://beyondgrep.com/">ack</a>, it is a perfect time to install it and start using it!

<h3>peek in the files</h3>

Lastly, let's see how can we set rules based on the content of the files:

<code lang="perl">
$rule->contents_match(qr/package/);
</code>

Obviously this can slow down the traversing quite a bit,
as this will require reading the file, but it can be very convenient.

<h2>An example</h2>

Lastly, let's see a full example where we combine several rules
in a nicely formatted way:

<code lang="perl">
use strict;
use warnings;
use 5.010;

use Path::Iterator::Rule;

die "Usage: $0 DIRs" if not @ARGV;

my $rule = Path::Iterator::Rule->new;
$rule->size("> 1000")
     ->perl_file
     ->contents_match(qr/package/);


my $it = $rule->iter( @ARGV );
while ( my $file = $it->() ) {
    say $file;
}
</code>

If you like this module, please send a thank-you note to
<a href="https://metacpan.org/author/DAGOLDEN">David Golden</a>, the author.

<h2>Comments</h2>

I am getting the following errors while trying to use your example:
Can't locate Path/Iterator/Rule.pm in @INC (@INC contains: /usr/lib/perl5/5.10.0/x86_64-linux-thread-multi /usr/lib/perl5/5.10.0 /usr/lib/perl5/site_perl/5.10.0/x86_64-linux-thread-multi /usr/lib/perl5/site_perl/5.10.0 /usr/lib/perl5/vendor_perl/5.10.0/x86_64-linux-thread-multi /usr/lib/perl5/vendor_perl/5.10.0 /usr/lib/perl5/vendor_perl .)

---

You need to install Path::Iterator::Rule https://perlmaven.com/cant-locate-inc-module-install-in-inc

---

I have used : /pkg/qct/software/perl/5.22.0/bin/perl, and it is working


