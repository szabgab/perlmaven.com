=title How to dereference a reference to a hash or to an array in Perl
=timestamp 2017-12-17T08:30:01
=indexes HASH, ARRAY, @$, %$, $$
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Given a reference to hash or a reference to an array in Perl, how can we get back the original hash or array?

What if we have a <b>reference to a reference to a hash</b> and we would like to get back the <b>reference to the hash</b>.

=abstract end

<h2>Dereference a HASH</h2>

In the first example we crate a reference to a hash (we call it <hl>$hr</hl>).
First we print it out directly so you can see it is really a reference to a HASH.
Then we print out the content using the standard <a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a> module.

Then we de-reference it by putting a <hl>%</hl> sign in-front of it <hl>%$hr</hl> and copy the content to another variable called <hl>%h</hl>.

Then we can see how to access the element of this new hash and how to access the same elements using the hash-reference we already had earlier.
For this first we use the "arrow notation" and then the "stacking sigils notation". I always prefer the "arrow notation".

<include file="/examples/hash_deref.pl">

The output will look like this:

<code>
HASH(0x7ff9c7004680)
$VAR1 = {
          'email' => 'foo@corp.com',
          'name' => 'Foo'
        };

Foo
Foo
Foo
</code>

<h2>Dereference an ARRAY</h2>

In the second example we create a reference to and ARRAY and assign it to <hl>$ar</hl>. We go through the same
steps except that here we prefix the reference using <hl>@</hl> to de-reference it gaining the <hl>@$ar</hl>
expression.

Here too we have both the "arrow notation" and the "stacked sigils notation" and here to I'd recommend the former.

<include file="/examples/array_deref.pl">

<code>
ARRAY(0x7f8954803c80)
$VAR1 = [
          'apple',
          'banana',
          'peach'
        ];

apple
apple
apple
</code>

<h2>Getting the reference from a reference to a reference to a hash</h2>

Sounds complex, but the code is quite simple.

We have a reference to a <b>hash of hashes</b> in the <hl>$hr</hl>.
The data structure in our example is actually built of three hashes.
The main hash has two keys "player_a" and "player_b". The value of each key
is a reference to hash by itself.

If we access the value of one of the keys of the main hash: <hl>$hr->{player_a}</hl>
we get to the reference of one of the internal hashes.

Hence in the output we see 3 HASH references as the first 3 lines of output.

Then using Data::Dumper we can see that at least the one provides access
to one of the internal hashes.

Finally we can see how to access an element inside on of internal hashes.

<include file="/examples/hash_of_hash_deref.pl">

<code>
HASH(0x7fff3d828db0)
HASH(0x7fff3d804680)
HASH(0x7fff3d828c78)
$VAR1 = {
          'name' => 'Foo',
          'email' => 'foo@corp.com'
        };

Bar
</code>

<h2>Comments</h2>

The core of every program. Thanks for sharing.

<hr>

Hi Gabor.
Thanks for your article. I can't see where you said WHY you prefer arrow notation over stacked sigils. Why do you prefer it? Cosmetics? Risk?
---
It looks much more readable to me, less confusing, and indeed less error-prone.

<hr>

Thanks much.
Does line 15 in /examples/hash_deref.pl:

    my %h = %$hr;

triggers deep copy of the hash?

---
no

<hr>

Would love to see an explanation of how to reference a hash element contained within an array of hashes. Trying to figure that out now. I know the hash I want is the first in the array, but having trouble determining how to access it, in print for example; $arrayOfHashes->[0] has the hash I want, and the hash itself in that element has a value stored in hash key 'ID'. Tried things like %{@arrayOfHashes->[0]}->{ID} etc. but haven't found the magical combo.

---
$arrayOfHashes->[0]->{ID} or in shorter: $arrayOfHashes->[0]{ID}

---
Thanks!

<hr>

---

use Data::Dumper to print out what is in %hash and what is in $ref. That will help you.

