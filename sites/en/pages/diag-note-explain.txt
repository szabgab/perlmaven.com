=title Test diagnostic messages using diag, note, and explain
=timestamp 2016-04-21T19:30:01
=indexes Test::More, diag, note, explain
=tags screencast
=status show
=books testing
=author szabgab
=comments_disqus_enable 0

=abstract start

In addition to the various functions that improved on the <hl>ok()</hl> function, such as <a href="/moving-over-to-test-more">is and isnt</a>,
<a href="https://metacpan.org/pod/Test::More">Test::More</a> also provides a few functions to help display extra diagnostic messages.

=abstract end

<screencast file="diag-note-explain" youtube="QBGIsZqolIs" />

While we could use simple <hl>print</hl> statements instead of these functions, using these functions will ensure that our diagnostic messages won't
interfere with any future changes in <a href="/tap-test-anything-protocol">TAP, the Test Anything Protocol</a>. So it is worth using them
instead of <hl>print</hl>.

<h2>diag</h2>

<hl>diag()</hl> accepts a list of values, and will print it to the Standard Error stream of the test script preceded by a <hl>#</hl> sign to indicate
to the <a href="/prove-the-harness">TAP processor harness</a> that this is just a comment. Not part of the protocol.

Given this script:

<code lang="perl">
use strict;
use warnings;

use lib 'lib';
use MyTools;

use Test::More tests => 3;

diag "Add two numbers";
is(sum(1, 1),    2,     '1+1');
is(sum(2, 2),    4,     '2+2');

diag "Add 3 numbers";
is(sum(2, 2, 2), 6,  '2+2+2');
</code>

The output will look like this:

<code>
1..3
# Add two numbers
ok 1 - 1+1
ok 2 - 2+2
# Add 3 numbers
not ok 3 - 2+2+2
#   Failed test '2+2+2'
#   at t/33.t line 14.
#          got: '4'
#     expected: '6'
# Looks like you failed 1 test of 3.
</code>

<h2>note</h2>

When running the test script directly <hl>note()</hl> does the same as <hl>diag()</hl>, printing the parameters to STDERR.
The difference occurs when we run the script under harness using <hl>prove</hl>. In that case messages printed using <hl>diag()</hl>
will still show up, while messages printed by <hl>note()</hl> will be hidden.

This is a simple test script with a <hl>diag()</hl>, a <hl>note()</hl>, and a single <hl>ok()</hl> call.
<code lang="perl">
use strict;
use warnings;
use Test::More tests => 1;


diag "This is from diag";
note "This if from note";
ok 1;
</code>

<hl>perl test.pl</hl> results in this output, where both diag and note messages can be seen:

<code>
1..1
# This is from diag
# This if from note
ok 1
</code>


Running via the harness using <hl>prove test.pl</hl> will generated this output, where
only the diag message will show up.

<code>
# This is from diag
test.pl .. ok   
All tests successful.
Files=1, Tests=1,  1 wallclock secs ( 0.03 usr  0.00 sys +  0.02 cusr  0.00 csys =  0.05 CPU)
Result: PASS
</code>


<h2>explain</h2>

<hl>explain</hl> comes in handy when we need to print out complex data structures. It is like a smart version of
<a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a>. If we give it a simple scalar it will return
the same scalar and if we give it a reference to a data structure, we get a nicely formatted version of that data
structure. Of course we still need to print it using either <hl>diag()</hl>, or <hl>note()</hl>, but it is nice
and compact.

This sample script has 3 variables. First we call <hl>diag()</hl> passing each one of the variables. This produces
readable output only if the variable had scalar content such as a string or a number. Then we call <hl>diag()</hl>
3 times passing what <hl>explain()</hl> returned.

<code lang="perl">
use strict;
use warnings;

use lib 'lib';
use MyTools;

use Test::More tests => 2;


is(sum(1, 1),    2,     '1+1');
is(sum(2, 2),    4,     '2+2');

my $x = "String data";
my $y = [ 1, 2, 3 ];
my %h = (
    foo => 'bar',
    numbers => [ 42, 17 ],
);

diag $x;
diag $y;
diag \%h;

diag explain $x;
diag explain $y;
diag explain \%h;
</code>

In the resulting output we can see the usefulness of <hl>explain</hl> to understand what's going on in a test script.

<code>
1..2
ok 1 - 1+1
ok 2 - 2+2
# String data
# ARRAY(0x7f8151804268)
# HASH(0x7f81520737e8)
# String data
# [
#   1,
#   2,
#   3
# ]
# {
#   'foo' => 'bar',
#   'numbers' => [
#     42,
#     17
#   ]
# }
</code>


<h2>When to use diag, note, and explain?</h2>

If within a test script we have multiple areas that we are testing, it can be a god idea to
use <hl>diag</hl> or <hl>note</hl> to mention this before the section.

If a test will take a long time and will seem to be "stuck", it can be a good idea to warn the user
beforehand.

When debugging a test script it is definitely a good idea to print the content of variables using <hl>diag explain</hl>.

Sometimes the test script will have strange output that looks like a failure or that have windows opening and closing
on the desktop. It would be a good idea to warn the user about these.

If a test case fails, the appropriate <hl>ok</hl> or <hl>is</hl> function will return false. It can be a good idea to print
extra information using the following construct:

<code lang="perl">
ok $condition, 'name' or diag explain $variable;
</code>

I can even imaging test cases that will explain how to report bugs if a
<a href="/what-is-the-status-of-the-current-test-script">test fails</a>.


