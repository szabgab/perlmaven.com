=title slurp mode - reading a file in one step
=timestamp 2013-08-26T16:13:10
=indexes $/, local, $INPUT_RECORD_SEPARATOR, $RS, slurp, File::Slurp, Path::Tiny
=status show
=books beginner
=author szabgab
=comments_disqus_enable 0

=abstract start

While in most of the cases we'd process a <a href="/what-is-a-text-file">text file</a> <a href="/open-and-read-from-files">line-by-line</a>,
there are cases when it is easier to do the work if all the content of the file is in the memory in a single scalar variable.

For example when we need to replace <b>Java is Hot</b> by <b>Jabba the Hutt</b> in a text file where the original text migh be spread
over more than one lines. For example:

<code>
... We think that Java
is Hot. ....
</code>

(Probably this is going to be funny only to programmers who are Star Wars fans and who have a Hungarian accent in
English as I do. Or maybe not even to them.)

In any case you can escape now and read more about <a href="http://en.wikipedia.org/wiki/Jabba_the_Hutt">Jabba the Hutt</a> or about <a href="https://code-maven.com/java">Java</a>.

=abstract end

Before you go on reading, please note, in this article first you'll see the "manual" way to slurp in a file. You can do
that, but there are more modern and much more readable ways to do that
<a href="/use-path-tiny-to-read-and-write-file">using Path::Tiny</a>.

Let's see an example. This is what we have in the data.txt file:

<code>
Java is Hot

Java is
Hot
</code>

<include file="examples/slurp_in_main.pl">

Running the above Perl program we get the following output:

<code>
Java is Hot

Java is
Hot
------------------------------
Jabba The Hutt

Jabba The Hutt
</code>

<h2>Explanation</h2>

The <hl>$/</hl> variable is the <b>Input Record Separator</b> in Perl. When we put the read-line operator in scalar
context, for example by assigning to a scalar variable <hl>$x = <$fh></hl>, Perl will read from the file up-to
and including the <b>Input Record Separator</b> which is, by default, the new-line <hl>\n</hl>.

What we did here is we assigned <a href="/undef-and-defined-in-perl">undef</a> to <hl>$/</hl>. So the read-line operator
will read the file up-till the first time it encounters <b>undef</b> in the file. That never happens so it reads till
the end of the file. This is what is called <b>slurp mode</b>, because of the sound the file makes when we read it.

In case you are wondering about the regex part here is the quick recap provided by <a href="http://jlbfuentes.com/">J.L. Bismarck Fuentes</a>.

<ul>
   <li><hl>=~</hl> regex matches <hl>$data</hl></li>
   <li><hl>s</hl> substitution, its syntax is <hl>s/regex_to_match/substitution/modifiers</hl></li>
   <li><hl>\s+</hl>  One or more whitespaces</li>
   <li><hl>g</hl> Globally match the pattern repeatedly in the string</li>
</ul>

The big problem with the above code is that <hl>$/</hl> is a global variable. This mean if we change <hl>$/</hl> in one place
of our code, it will change the behavior of Perl in other places of our code.
It will impact even third-party modules used in our application. That is certainly not good.

So it is better to localize it:

<h2>localize the change</h2>

<include file="examples/slurp_localized.pl">


We have 3 changes in this code:
<ul>
<li>We put the <hl>local</hl> keyword in front of the assignment to <hl>$/</hl>. This will make sure the value of <hl>$/</hl>
returns to whatever it was when the enclosing block ends.</li>
<li>For this we needed an enclosing block, so we added a pair of curly braces around
the code-snippet dealing with the file.</li>
<li>The third change is that we had to declare the <hl>$data</hl> variable outside of the block,
or it would go out of scope when the block ends.</li>
</ul>


<h2>Creating a slurp function</h2>

In the third iteration of the code, we create a separate function called <hl>slurp</hl> that will get
the name of the file and return the content as a single string. This allows us to hide the code-snippet
at the end of the program or even in a separate file. It also makes it reusable, so instead of copying it
to other places where we might need the same functionality we can just call the <hl>slurp</hl> function.

This makes the main body of our code much nicer.

<include file="examples/slurp_in_function.pl">

Of course we could further improve our slurp function by setting the encoding to <hl>utf-8</hl> and by providing better
error message in case one of the system calls fail.

<h2>File::Slurp</h2>

In the article <a href="/how-to-replace-a-string-in-a-file-with-perl">replacing a string in a file</a> we had a similar example,
except that there we used the <hl>read_file</hl> function of the <a href="https://metacpan.org/pod/File::Slurp">File::Slurp</a> module.

<h2>Path::Tiny</h2>

An even better solution is to use the <a href="https://metacpan.org/pod/Path::Tiny">Path::Tiny</a>
module. It exports the <hl>path</hl> function that gets a path to a file as a parameter and returns
an object. We can then call the <hl>slurp</hl> or <hl>slurp_utf8</hl> methods on that object:

<include file="examples/slurp_path_tiny.pl">

<h2>Installing the modules</h2>

Neither of these modules come with the standard Perl distribution so you will need to install them first.
There are a number of ways to <a href="/how-to-install-a-perl-module-from-cpan">install a Perl module from CPAN</a>.

<h2>Comments</h2>

As so far, it is not explained how this works:
$data =~ s/Java\s+is\s+Hot/Jabba The Hutt/g;

=~ -> regex matches $data
s -> substitution, its syntax is s/<regex_to_match>/<substitution>/<modifiers>
\s+ -> One or more whitespaces
g -> Globally match the pattern repeatedly in the string
See the perl documentation for more info https://perldoc.perl.org/perlre

<hr>

Once the file is slurped into $data is it possible to read line by line from $data?

You can split it by newline and do that, but I wonder, if you'd like to process it line-by-line then why read the whole file in memory?

Good point. I can explain why I wanted to do this in this way: I'm not a "real" programmer and I use mainly R (and SQL) where I usually read files into a so called dataframe (=table). From there I can work on this table, for example, selecting only rows which fullfills some criteria. So, now I learned that I have reconsider my habits. I will read line-by-line and create arrays or hashes according to the row criteria. By the way thank you very much for your blog.


<hr>

Please do not recommend File::Slurp. Use File::Slurper instead.

<hr>

In examples 2 and 3 the close $fh isn't needed. Perl will close the $fh when it reaches end of the scope.

<hr>

I prefer Path::Class slurp


use Path::Class qw{file};
my $content = file("filename")->slurp();
my @lines = file("filename")->slurp(chomp=>1);



