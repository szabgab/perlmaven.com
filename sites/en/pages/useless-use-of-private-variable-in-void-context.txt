=title Useless use of private variable in void context
=timestamp 2018-06-23T08:30:01
=indexes warnings, B::Deparse
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

This is another version of the <a href="/useless-use-of-hash-element-in-void-context">Useless use of hash element in void context</a>
warning that you might get if you follow my suggestion and turn on <a href="/always-use-warnings">warnings in Perl</a>.

=abstract end

This example:

<include file="examples/set_default.pl">

was taken from the article where you can see how adding <a href="/always-use-warnings">use warnings</a> to some
code can uncover bugs. For example if we run the above code we see no output at all, but if we enable <hl>use warnings</hl>
or run the code using the <hl>-w</hl> flag of Perl then we get the following:

<code>
perl -w examples/set_default.pl
Useless use of private variable in void context at ...
</code>

As with the <a href="/useless-use-of-hash-element-in-void-context">other example</a>, here too
we can use <a href="https://metacpan.org/pod/B::Deparse">B::Deparse</a> to uncover the truth:

<code>
perl -MO=Deparse,-p examples/set_default.pl

use strict;
(my $default_code = 42);
((my $code = get_code()) or $default_code);
sub get_code {

}
</code>

The precedence of <hl>=</hl> is higher than that of <hl>or</hl> and so the <hl>or $default_code</hl>
has no impact on anything.

<h2>This or That</h2>

An even simpler case of the problem can be seen here:

<include file="examples/this_or_that.pl">

<h2>Solution</h2>

The solution is to use <hl>||</hl> or <hl>//</hl> instead of <hl>or</hl>
and to <a href="/always-use-warnings">always use warnings</a>!


<h2>Comments</h2>

I'm surprised by this, I would expect $x or $y to return 1 or 0 regardless. And I can't imagine using it in an assignment. It's just not very readable.

<h2>

Another cause for this warning took me a while to track down ...
As $n was already defined, I started a for loop like this:

for( $n; $n <= $endDateVal; $n += $secsInt ) {


This resulted in the warning, which could be cleared by either of the following:

for( ; $n <= $endDateVal; $n += $secsInt ) {


or

for( $n = $n; $n <= $endDateVal; $n += $secsInt ) {

and thanks for your articles.

<h2>
Thanks for the great info, but I too triggered this warning using a technique not described above. I declared a sub called 'write' and the warning pointed at the line where I called it. Renaming my sub from 'write' to 'writestuff' resolved it. Yay.

<h2>
Even weirder case of this:

use strict;
use warnings;

my $i = 0;
for ($i = 0; $i => 4; $i++) {
print $i;
}

Problem is caused by the '=>' that should be a '>='. However the warning is indicated at the end of the loop to confuse matters.
