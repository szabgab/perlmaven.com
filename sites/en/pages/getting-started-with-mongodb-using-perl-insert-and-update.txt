=title Getting started with MongoDB using Perl - insert and simple update
=timestamp 2015-04-27T06:50:01
=indexes MongoDB, insert, insert_one
=status show
=books mongodb
=author szabgab
=comments_disqus_enable 0

=abstract start

<a href="http://www.mongodb.org/">MongoDB</a> is an open-source NoSQL document database.
In this article we see the basics: How to insert a document in a MongoDB collection
and how to update a document.

=abstract end

<h2>Inserting elements</h2>

The most simple example is inserting two element in a collection.

<include file="examples/mongodb_insert_two_elements.pl">

<hl>my $client = MongoDB::MongoClient->new(host => 'localhost', port => 27017);</hl>
connects to the MongoDB server running on the same machine at the default port.

The next call:
<hl>my $db   = $client->get_database( 'example_' . $$ . '_' . time  );</hl>
returns a database. In order to reduce the chances that we access an already
existing database we create the name of the database on the fly using the
current process id <hl>$$</hl> and the current <hl>time</hl> in seconds.

Once we have the database object in <hl>$db</hl> we fetch the collection
which is similar to tables in relational databases, with the big difference that
we don't need to execute special commands to create it or to set up a schema:
<hl>my $people_coll = $db->get_collection('people');</hl>

The next two calls insert data structures (hash references) in the collection.
In the terminology of MongoDB they are called documents:

<code lang="perl">
$people_coll->insert_one( {
    name => 'First',
});

$people_coll->insert_one( {
    name => 'Second',
});
</code>

Then we call <hl>find</hl> to fetch all the documents. It returns an object
that can be used to iterate over all the documents returned by find using the
<hl>next</hl> method of the object.

<code lang="perl">
my $people = $people_coll->find;
while (my $p = $people->next) {
    print Dumper $p;
}
</code>

On every iteration this return a hash reference (stored in <hl>$p</hl>)
that contains the document. We use Data::Dumper to print them out:

<code>
$VAR1 = {
          '_id' => bless( {
                          'value' => '52861f9602490acc35000000'
                        }, 'MongoDB::OID' ),
          'name' => 'First'
        };
$VAR1 = {
          '_id' => bless( {
                          'value' => '52861f9602490acc35000001'
                        }, 'MongoDB::OID' ),
          'name' => 'Second'
        };
</code>

In addition to the data we inserted, each document also contains another
field called <hl>_id</hl> that is the unique id of this document, called
the <a href="http://docs.mongodb.org/manual/reference/object-id/">ObjectIDd</a>.
(but read the
<a href="http://docs.mongodb.org/manual/reference/object-id/">specification</a>
for more, well, specific details.)

The last statement in this example is <hl>$db->drop;</hl>. As the name
might let you guess, it will drop the database so we won't have lots
of example databases hanging around.


<h2>Manually dropping a database</h2>

If for some reason the database is not dropped at the end of the script (e.g. if
there was an exception in the code we can manually drop the database using
the <hl>mongo</hl> command line client:

<code>
$ mongo
MongoDB shell version: 2.4.6
connecting to: test
> show dbs
demo   0.078125GB
dev_site  0.203125GB
example_13930_1384522288   0.203125GB
local   0.078125GB

> use example_13930_1384522288
switched to db example_13930_1384522288

> db.dropDatabase()
{ "dropped" : "example_13930_1384522288", "ok" : 1 }

> show dbs
demo   0.078125GB
dev_site   0.203125GB
local  0.078125GB

> exit
bye
$
</code>


<hl>show dbs</hl> will list all the databases. (There were 4 in this MongoDB installation)

<hl>use example_13930_1384522288</hl> switches to the database.

<hl>db.dropDatabase()</hl> drops the database and

<hl>exit</hl>, quits the client.

<h2>Dropping the database at the END</h2>

Another idea might be to put the database dropping code in an <hl>END</hl> block:

<code lang="perl">
END {
    $db->drop if $db;
}
</code>

That will ensure that the database is dropped even if there was an exception in the code.

The <hl>if</hl> was added so we won't call <hl>drop</hl>
if for some reason we don't even have a database object.

<h2>Update one of the documents</h2>

Now that we know how to insert data, let's see an example to update one of the documents.
After the second call to <hl>insert</hl> I added this code:

<code lang="perl">
$people_coll->update(
    { name => 'Second'},
    { '$set' => {
            phone => '1-123',
        },
    },
);
</code>

<hl>update</hl> gets two hash references. The first one
<hl>{ name => 'Second'}</hl> is the selector (what would be a WHERE-clause in SQL).
It means, update the document where the "name" field equals to 'Second'.

The second hash reference does the actual update. <hl>'$set'</hl> is a MongoDB command
that tells the database engine to set a value. The <hl>{ phone => '1-123'}</hl> part
tells to set the phone field to be '1-123'. Regardless if it existed or not before.

The output now looks like this:

<code>
$VAR1 = {
          'name' => 'First',
          '_id' => bless( {
                          'value' => '52862563527197d436000000'
                        }, 'MongoDB::OID' )
        };
$VAR1 = {
          'name' => 'Second',
          '_id' => bless( {
                          'value' => '52862563527197d436000001'
                        }, 'MongoDB::OID' ),
          'phone' => '1-123'
        };
</code>

The ObjectIds has changed because this was a new run. That's not the point
of this example.

The interesting part is that the second document now has both a 'name' and a 'phone'
field while the first document only has a 'name'.

<h2>Comments</h2>

Great set of articles on getting started with mongodb and perl! They are concise and helped me get started and gave me a better understanding how to utilize this technology. It would be great if you could post an article on how to join collections.

<hr>
k, I'm using your website for years now, each and every time that I have something new to me, to do with Perl I come here and you have the answer.
I don't think that I would have been as good with Perl than I am now without this website !
So thanks a lot for your work, it helps me a lot of times for at least 5 years now, thanks for the efficiency of your explanation, it's always clear and without useless information !
And thanks for this tutorial with Mongo ! I just started Mongo and this helps me a lot !

<hr>
Looks like the newest version of the MongoDB module uses insert_one instead of insert:  https://perlmaven.com/pod/mongodb#MongoDB::Collection

<hr>

Great content as per your usual high standards! However, I am having a problem connecting to the mongodb server from my perlscript (or using your script above) and have spent ages trying to figure how to fix.
The mongodb server IS running on the 27017 port and I can view my test databases using from the mongo shell or via compass BUT on trying to connect via perl, I am getting the error:

"MongoDB::SelectionError: No readable server available for matching read preference primary. MongoDB server status:
Topology type: Single; Member status:
localhost:27017 (type: Unknown, error: MongoDB::NetworkError: Could not connect to 'localhost:27017': Bad address )"

The line:
my $client = MongoDB::MongoClient->new(host => 'localhost', port => 27017);

does not appear to throw the error, but trying to create or amend a dbase does. Any suggestions solutions most welcome!


