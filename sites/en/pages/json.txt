=title JSON in Perl
=timestamp 2015-05-27T18:00:01
=indexes JSON, JSON::XS, JSON::Syck, Cpanel::JSON::XS, Mojo::JSON, decode_json, encode_json, JSON::MaybeXS 
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

<a href="https://code-maven.com/json">JSON (JavaScript Object Notation)</a> is a
lightweight data interchange (serialization) format inspired by JavaScript object literal syntax.

=abstract end

<include file="examples/sample.json">

<h2>JSON implementations in Perl</h2>

There are several modules that can convert Perl data structures to JSON, and JSON to Perl data structures.

<ul>
  <li><a href="https://metacpan.org/pod/JSON">JSON</a></li>
  <li><a href="https://metacpan.org/pod/JSON::PP">JSON::PP</a></li>
  <li><a href="https://metacpan.org/pod/JSON::Syck">JSON::Syck</a></li>
  <li><a href="https://metacpan.org/pod/JSON::XS">JSON::XS</a></li>
  <li><a href="https://metacpan.org/pod/Cpanel::JSON::XS">Cpanel::JSON::XS</a></li>
  <li><a href="https://metacpan.org/pod/Mojo::JSON">Mojo::JSON</a>, part of Mojolicious.</li>
  <li><a href="https://metacpan.org/pod/JSON::MaybeXS">JSON::MaybeXS</a> <b>The recommended!</b></li>
  <li><a href="https://metacpan.org/pod/JSON::Meth">JSON::Meth</a></li>
</ul>

<a href="https://metacpan.org/pod/JSON::PP">JSON::PP</a> is a Pure-Perl implementation that can be found in the recent releases of
Perl core. 
According to comments on <a href="https://perlmaven.com/comparing-the-speed-of-json-decoders">this article</a>
<a href="https://metacpan.org/pod/Mojo::JSON">Mojo::JSON</a>, which is also a pure-Perl implementation, is 50% faster than
JSON::PP.

According to my measurements <a href="https://perlmaven.com/comparing-the-speed-of-json-decoders">Cpanel::JSON::XS is the fastest</a>
implementation and despite its name, the only connection to Cpanel is that they sponsor the maintenance of it.

<a href="https://metacpan.org/pod/JSON::MaybeXS">JSON::MaybeXS</a> is a wrapper around a number of these implementations.
It will use the XS (and therefore much faster) version if it is installed, and will use the Pure-Perl version if the XS version
is not installed.

There are plenty of other modules on CPAN handling JSON in various special cases. If you know about another one you think should
be mentioned here, please send a note or a pull-request.

<h2>Usage example: Encoding Perl to JSON</h2>

Let's say we have a data structure in Perl - a reference of a HASH with an internal array, and internal hash, and one of the keys, 'gender',
without a value. Having no value is represented with <a href="/undef-and-defined-in-perl">undef</a> in Perl.

<code lang="perl">
my $student = {
    name => 'Foo Bar',
    email => 'foo@bar.com',
    gender => undef,
    classes => [
        'Chemistry',
        'Math',
        'Literature',
    ],
    address => {
        city => 'Fooville',
        planet => 'Earth',
    },
};
</code>

We can use the <hl>encode_json</hl> function exported by the <a href="https://metacpan.org/pod/Cpanel::JSON::XS">Cpanel::JSON::XS</a> module
to convert this data structure to a JSON string:

<include file="examples/json_encode.pl">

The resulting output looks like this:

<code>
{"classes":["Chemistry","Math","Literature"],"gender":null,"name":"Foo Bar","email":"foo@bar.com","address":{"city":"Fooville","planet":"Earth"}}
</code>

Even without knowing JavaScript, you can see that it is quite similar to what we had in Perl, though this is a compact version of the JSON string
and thus there are no linebreaks. Still we can see that instead of the <hl>=></hl> we used for representing key-value pairs, here we have <hl>:</hl>,
and instead of the <hl>undef</hl>, here we have <hl>null</hl>. Oh and the keys are all inside double-quotes.

We can now take this string, save it to  file or send it to another computer.

<h2>Encoding JSON in a human-readable way</h2>

While the above JSON is compact, it is also quite difficult to read and manually edit. We can ask the JSON
encoder to make the JSON pretty. (Sometimes this is called JSON beautification or JSON beautifier).
The syntax is slightly different:

<include file="examples/json_encode_pretty.pl">

(You might need a relatively recent version of <a href="https://metacpan.org/pod/Cpanel::JSON::XS">Cpanel::JSON::XS</a> to support the <hl>sort_by</hl> parameter.

<code>
$ perl examples/json_encode_pretty.pl
</code>

So is the result:

<code>
{
   "address" : {
      "city" : "Fooville",
      "planet" : "Earth"
   },
   "classes" : [
      "Chemistry",
      "Math",
      "Litreture"
   ],
   "email" : "foo@bar.com",
   "gender" : null,
   "name" : "Foo Bar"
}
</code>

<h2>Decoding JSON to Perl</h2>

In the other way around, let's assume we have a JSON string in the <hl>$student_json</hl> variable.
We can use the <hl>decode_json</hl> function exported by the <a href="https://metacpan.org/pod/Cpanel::JSON::XS">Cpanel::JSON::XS</a> module
to convert this string to a Perl data structure and then we use <a href="https://metacpan.org/pod/Data::Dumper">Data::Dumper</a> to print
out a more familiar representation of the data.

<include file="examples/json_decode.pl">

The output will look like this though of course the order of the keys might be different. After all Perl does not
maintain order among the hash keys.

<code lang="perl">
$VAR1 = {
          'gender' => undef,
          'email' => 'foo@bar.com',
          'address' => {
                         'planet' => 'Earth',
                         'city' => 'Fooville'
                       },
          'classes' => [
                         'Chemistry',
                         'Math',
                         'Literature'
                       ],
          'name' => 'Foo Bar'
        };
</code>

From these two examples it is quite easy to construct a round-trip example, that encodes a Perl data structure to JSON and then decodes the
string back. Of course that's not very interesting in itself. It would be much more interesting to also save the file to the disk in the middle.
Further down you'll find an exercise that will do that.

<h2>More about JSON</h2>

Of course the above was just a taste into how the encoding/decoding works. There are quite a few issues you might need to be aware,
probably the most important is how the encoding handles blessed Perl objects.

<h2>Exercise</h2>

As an exercise, let's create a script that acts as a counter. It will accept a string on the command line, increase a counter and display that
value. Each string will have its own counter. It would work like this:

<code>
$ count foo
  foo: 1
$ count foo
  foo: 2
$ count bar
  bar: 1
$ count foo
  foo: 3
</code>
  

<h2>Other languages</h2>

<a href="http://php.net/manual/en/ref.json.php">PHP</a> has built-in functions such as json_decode and json_encode.

<a href="https://docs.python.org/2/library/json.html">Python</a> comes with a class called json that will handle all aspects of JSON processing.

<a href="http://ruby-doc.org/stdlib-2.0/libdoc/json/rdoc/JSON.html">Ruby</a> also comes with a standard library handling JSON files</a>

<h2>Comments</h2>

I want to parse JSON file without using perl module.. Can you please help..

---

The quick and dirty way is to change the JSON syntax to Perl syntax and then Eval it back into Perl, like this:

my $JSON='json string here';
$JSON=~s/":/"=>/g;
my $PERL=eval $JSON;

That will work about 95% of the time.

---
Good thinking! Love it!
Works great with json from both openweathermap.org and sunrise-sunset.org.

---
I just bumped into JSON::Parse, which seems to have recent activities, compared to JSON...
Does anybody know the motivation to abandon JSON in favor of JSON::Parse?

<hr>

Here we are taking a static json data in the perl script, right?. What if i have a json file and I need to assign the perl variables with json data.

---

I don't know what do you mean by "static json data", but in any case I think after reading an example and/or the documentation you need to write some code, experiment a bit and then show your code if you have some question about it.

---
Haha, true.

---
<hr>

Hello Gabor,

I HAVE been writing some perl and experimenting with decoded JSON results. Your decode example above is a good introduction but quite superficial and doesn't help me get to the next level. I have a JSON object that is large, deep and complex: arrays in hashes, hashes in arrays, etc. Dumper shows me that I have a valid JSON object with much data. My task is to filter certain data from the JSON object but I can't seem to get past the first level. Dewang asks the question, "...I need to assign the perl variables with json data..."

I think he means to ask, "How can I assign a part of the JSON object data to a perl variable?"
Here is my approach so far:
...
open($jsonFile, "<", $ARGV[0]) || die("$ARGV[0] not found...");

# Unset the separator to get the entire file.
local $/ = undef;
$jsonIn = <$jsonFile>;
close($jsonFile);

# Initialize a JSON object
$json = JSON->new;

# decode returns a reference; a pointer.
$data = $json->decode($jsonIn);
#print Dumper($data); # Shows lots of data as expected

# Look at the data object reference as returned from decode
print "raw:".$data."\n"; # HASH(0x1899b28)
print "ref:".ref($data)."\n"; # HASH
print "keys:".keys($data)."\n"; # 4

$, = "\n";
print keys($data); # shows the key names
print "\n";
$, = "";

# Look at one of the hashes directly from the data object
print "raw:".$data->{SUMMARY}."\n"; # HASH(0x1c8e710)
print "ref:".ref($data->{SUMMARY})."\n"; # HASH
print "keys:".keys($data->{SUMMARY})."\n"; # 4

$, = "\n";
print keys($data->{SUMMARY}); # shows the key names
print "\n";
$, = "";

# Why can't I assign a hash from the data object to a hash variable?
my %summary = $data->{SUMMARY}; # no error
print "raw:".%summary."\n"; # 1/8 ?
print "ref:[".ref(%summary)."]\n"; # [] ?
print "keys:".keys(%summary)."\n"; # 1 ? Should be over 700

# end of perl file

---

The question has nothing to do with JSON. These are just Perl data structure operation unrelated to where did the data arrive from.

A reference to a hash and a hash are two different things in perl,

$data->{SUMMARY} is probably a reference to HASH so if you'd like to assign it to a has you need to dereference it:

my %summary = %{ $data->{SUMMARY} };

For the next level you need to learn more about Perl data structures, references and dereferencing.

---

Thanks. As usual, I tried a bunch of ways to dereference it, just not that way.
I'll take another look and read up on referencing.

