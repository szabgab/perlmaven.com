=title Useless use of hash element in void context
=timestamp 2018-04-08T08:30:01
=indexes warnings, B::Deparse
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

Among the many <a href="/always-use-warnings">warnings of Perl</a> that might, or might not indicate
a bug, this certainly points to code that was written incorrectly.

=abstract end

If we run this script:

<include file="examples/hash_with_or.pl">

We get: <b>Useless use of hash element in void context</b>

The same is true if we use HASH references:

<include file="examples/hashref_with_or.pl">

The problem was probably created when the author of this code wanted to set
a <a href="/how-to-set-default-values-in-perl">default value</a>. That is
the author wanted to set <hl>$r</hl> to be equal to <hl>$h{a}</hl>, but if that key
did not exist, or if its value was <a href="/undef-and-defined-in-perl">undef</a>
then she wanted to set <hl>$r</hl> to be <hl>$h{b}</hl>.

Unfortunately the snippet to <a href="/how-to-set-default-values-in-perl">set default value</a>
uses <hl>||</hl> and not <hl>or</hl>.

The reason for that is that <hl>||</hl> is higher in the precedence table than <hl>=</h> which
is higher than <hl>or</hl>. So the correct code would have been:

<code>
my $r = ($h{a} or $h{b});
</code>

or in a more idiomatic way:

<code>
my $r = $h{a} || $h{b};
</code>

Probably even better to use the defined-or operator:

<code>
my $r = $h{a} // $h{b};
</code>

that was introduced in <a href="/what-is-new-in-perl-5.10--say-defined-or-state">Perl 5.10</a>.

<h2>B::Deparse</h2>

If you did not know the above and could not find an article explaining it, you could always
ask Perl to tell you what does it think about a piece of code. For this you can usually use
<a href="https://metacpan.org/pod/B::Deparse">B::Deparse</a> with the <hl>-p</hl> flag
to add extra parentheses.

In our case this is what we get:

<code>
perl -MO=Deparse,-p examples/hash_with_or.pl

Useless use of hash element in void context at examples/hash_with_or.pl line 9.
use warnings;
use strict;
(my(%h) = ('a', 1, 'b', 2));
((my $r = $h{'a'}) or $h{'b'});
</code>

Here you can see that B::Deparse added parentheses around the assignment <hl>(my $r = $h{'a'})</hl>
which means that will be executed first and then there is a dangling extra code: <hl>or $h{'b'}</hl>
that has no impact on anything. That's why Perl warns you about <hl>useless use</hl>.

The correct way to write this would be to write this:

<include file="examples/hash_with_or_fixed.pl">

<h2>Comments</h2>

I have been bitten by this, as I tend to default to “or” because it is lower precedence, which often is desired, as in this case:

open FH, $file or die “Cannot open file $file”; 

If you use || instead of “or”, the double pipe resolves first, and so will return true for a non-empty file. But since “or” has a lower precedence than comma, if you use “or”, it will execute as expected.

Note that confusion between “or” and || can be avoided enforcing precedence with parentheses, by writing:

open ( FH, $file ) || die “Cannot open file $file”; 

making parentheses a good standard practice in my book.

I think a thorough discussion of this in the Beginner Perl Maven e-book would be an excellent addition (if it is not already there).


