=title Debugging Perl with hdb
=timestamp 2013-10-04T11:30:01
=indexes Devel::hdb, -d
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

Perl comes with a <a href="/using-the-built-in-debugger-of-perl">built-in command line debugger</a>,
but many people dislike it as it is not visual enough.
There is the venerable <a href="https://metacpan.org/pod/Devel::ptkdb">Devel::ptkdb</a> of Andrew E Page,
but it has not been updated since 2004 and it requires Tk.

Enter the <a href="https://metacpan.org/pod/Devel::hdb">Devel::hdb</a> written by Anthony Brummett
and you get a nice web based debugger.

=abstract end

While developing a Perl implementation of a web API,
I got some <a href="http://stackoverflow.com/questions/19155254/lwpuseragent-and-httprequest-for-a-post-request">strange issues in LWP::UserAgent</a>
and thought I should try to investigate. So I wrote a small sample program and now I'd like to step through it.

<code lang="perl">
use strict;
use warnings;
use 5.010;
use LWP::UserAgent;
use JSON qw(to_json);

my $data = to_json({ fname => 'Foo', lname => 'Bar' });

my $ua = LWP::UserAgent->new( agent => 'Great Perl Agent' );
$ua->default_header("Content-Type" => "application/json");
my $res = $ua->post('https://perlmaven.com/', Content => $data);
say $res->status_line;
say $res->content;
</code>


First install <a href="https://metacpan.org/pod/Devel::hdb">Devel::hdb</a> using <hl>cpan</hl>
or <a href="http://cpanmin.us/">cpanm</a>.

Then run the script using the <hl>-d:hdb</hl> flag:

<hl>perl -d:hdb lwp.pl</hl>

This will run the script via the <hl>Devel::hdb</hl> debugger. It will print to the console something like this:

<code>
Debugger pid 5343 listening on http://127.0.0.1:8080/
</code>

so I turned my browser to that address:

<img src="/img/hdb-01.png" alt="HDB first page" />

It shows the source code of my script. The statement to be executed
<hl>my $data = to_json({ fname => 'Foo', lname => 'Bar' });</hl>
is highlighted with a blue line. (see the picture.)

<h2>Step Over and Inspect variable</h2>

The first line is converting a Perl data structure to a JSON string, but that's not what I'd like to debug.
So I clicked on the <hl>Step Over</hl> button at the top. This let perl execute the <hl>to_json</hl> function
and stopped on the next line.

Once it stopped I could hover over the <hl>$data</hl> variable and see the content:

<img src="/img/hdb-02.png" alt="HDB show variable" />


<h2>Watch a variable</h2>

The next line <hl>my $ua = LWP::UserAgent->new( agent => 'Great Perl Agent' );</hl> creates the
user agent. As the problem I encountered was in the formation of the POST request I did not want to
debug this line either so I clicked on the <hl>Step Over</hl> button again. I could inspect
the resulting object in <hl>$ua</hl>, but the content was too big to be seen comfortably in
the the pop-up data inspector and I knew I'll need to check this variable often.
So I clicked on the <hl>+</hl> of the <hl>Watch Expression: +</hl> in the top right corner and typed in
<hl>$ua</hl>. It immediately showed the content in the right panel.

For comparison I also hovered over <hl>$ua</hl> to show how that displays the content of the
<hl>LWP::UserAgent</hl> object.

<img src="/img/hdb-03.png" alt="HDB watch variable" />

The little blue circled numbers <img src="/img/hdb-04.png" alt="HDB blue numbers" /> indicate the size of each data structure.
(Number of array elements or number if pairs in hashes). They can be clicked to hide/show to content of the data structure.

Click on <hl>Step Over</hl> again and see how the <hl>def_headers</hl> section has been automatically updated on the
right hand side.

<h2>Step In</h2>

The next line is where the debugging session gets interesting. So instead of stepping over the function, I clicked on
the <hl>Step In</hl> button. The picture changed drastically:

<img src="/img/hdb-05.png" alt="HDB step in" />

The content of the main panel was replaced by the source code of the <hl>post</hl> function of the <hl>LWP::UserAgent</hl>
module, and the first statement in the function was highlighted. This is the next statement to be executed.

The <hl>$ua</hl> variable we have been watching on the right hand side now shows <hl>undef</hl>, because it went out of scope.

In the left panel we suddenly see the <hl>stack trace</hl> of our process. The lower entry <hl>MAIN</hl> indicates the
main script and the <hl>post</hl> indicates the current function.


<h2>More features</h2>

We could go on debugging this script, and showing some other fun features of the debugger, but I think this is
enough for a first taste.

<h2>The source</h2>

<a href="https://metacpan.org/pod/Devel::hdb">Devel::hdb</a> can be found on CPAN and the
source code is on <a href="https://github.com/amb43790/Devel-hdb">GitHub</a> waiting for
you to fork and improve.

<h2>Comments</h2>

thanks for the good hint to Devel::dhb debugger. I've tried your example. But running my Firefox Browser
I did not see any panes with file content or other debgger features. Internet Explorer did it too.
The only thing I see is some commands.

saveconfig:  " /saveconfig"
subinfo:        "/subinfo"
source:         "/source/getfilename.pl"
stepover:      "/stepover"
program_name: "getfilename.pl"
packageinfo:      "/packageinfo"
...

What is going wrong ? Could you please help me ?
