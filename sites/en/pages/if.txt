=title Conditional statements, using if, else, elsif in Perl
=timestamp 2014-04-22T20:30:01
=indexes if, else, elsif, indentation, else if, ...
=status show
=books beginner
=author szabgab
=comments_disqus_enable 0

=abstract start

So far in the <a href="/perl-tutorial">tutorial</a> each statement got executed one after the other. There
are cases when we want to execute certain statements only if some condition is met: i.e. if the condition
evaluates to "true".

The <hl>if</hl> statement is used for this task.

=abstract end

The basic structure of the <hl>if-statement</hl> is 

<code lang="perl">
if (CONDITION) {
   STATEMENT;
   ...
   STATEMENT;
}
</code>

For example

<include file="examples/input_and_condition.pl">

Both the parentheses around the <b>condition</b> and the curly braces <hl>{}</hl> are required.
(A special note for people with background in the C programming language:
Even if there is only one statement, that statement needs to be wrapped in a pair of curly braces.)

The condition itself can be any Perl-expression. If it is <a href="/boolean-values-in-perl">true</a>,
the statement(s) inside the curly braces will be executed. If it is <a href="/boolean-values-in-perl">false</a>,
it will be skipped. (For what constitutes true and false, check the article about <a href="/boolean-values-in-perl">boolean values</a>.)


<h2>Layout: Indentation</h2>

As in Perl white-spaces are not significant we could have laid-out the code in a number of different ways, 
without any impact on what the code does, but let me point out the way you see it here and why
it is the recommended layout. The important part is that the code inside the curly braces does not start
at the beginning of the line. It starts a few characters to the right. This is called <b>indentation</b>.
In the tutorial we will see a number of statements that have an internal block (a pair of curly braces),
and in each one of those we'll indent the code to the right. This indentation makes it easier for the
reader to see which parts of the code is inside the block and what is outside.
There are languages, such as Python that force you to add such indentation. Perl is much more laid-back,
and much more flexible in this area, but it is still strongly recommended that you always indent your code.

People love to debate whether one should use a <hl>tab</hl> character or <hl>spaces</hl> for indentation,
and the "spaces" camp is also subdivided by the number of spaces. I think it is not the critical part.
The important thing is that the code will be indented in a consistent way.

In these examples I use 4 spaces, but when I write an application I usually use <hl>TAB</hl> characters.
When I have to edit the code written by other people, I try to follow their style. If there is one.

<h2>if - else</h2>

There are cases when we want to do something if a condition is met (when it is true),
and something else if it is false.
For this we can use the <hl>else</hl> extension of the <hl>if-statement</hl>:

<include file="examples/if_else.pl">

In this code, if the condition was true and <hl>$age</hl> was greater or equal to 18, then the if-block was executed.
If the condition was false then the else-block was executed.

As we can see from the first example, the else-part is optional, but if we add the word <hl>else</hl> we also have
to add the curly braces.

<h2>Nested if statements</h2>

<include file="examples/nested_statements.pl">

Perl allows to add addition if-statements, both in the if-block and in the else-block.

Note, the code inside the internal blocks is further indented to the right with another 4 spaces.

<h2>elsif</h2>

In another example we can see how we can easily have several levels of indentation:

<include file="examples/deep_indentation.pl">

This works properly, but it has two issues:

One is that the width of the screen is limited. If you indent too much then either your rows will be too wide and won't fit in
the screen or you'll have to wrap the code. Both make it harder to read the code.

The second one is that most programmers when reading code tend to focus on what's on the left hand side and either neglect the right hand side
of the code or just perceive as less important. So by indenting the code you send the message to the maintenance programmer, that the
nested conditions are less important.
If this is your intention then go ahead write the code this way, on the other hand, if the only reason to write nested conditions is
because that's the easy order to evaluate the conditions, then you'd be better off using <hl>elsif</hl> and flattening the construct.

<include file="examples/flat_indentation.pl">

This code does exactly as the previous one, but this time, instead of nesting an if-statement inside the else-block,
we used an <hl>elsif-statement</hl> which means we don't need an extra indentation level.
This also sends the message that the 4 cases have the same importance.

When you code, remember, the computer will understand you either way, but make it easy for the next reader to understand
your intentions. Who knows, that person might be you...

<h2>else if in Perl</h2>

Please also note that the spelling of the "else if" construct has the most diversity among programming languages.  In Perl it is written in one word with a single 'e': <hl>elsif</hl>.

<h2>Empty block</h2>

Though usually it is not necessary, in Perl we can also have empty blocks:

<include file="examples/empty_block.pl">

Sometimes we write this when first we write the skeleton of the program and only later
add the code that needs to be in the block.

We can add comments inside, but we don't have to.

<include file="examples/empty_block_comment.pl">

Actually, there is even a special code-snippet that was added to version 5.10 of perl:

<include file="examples/block_with_yada_yada.pl">

The 3 dots there, is called the <hl>yada, yada operator</hl>. It is what most people would
write when they are jotting down some text and want to leave place for more. Some might write
etc.

Since version 5.10 came out,  it is also a valid construct in Perl. It will throw an <hl>Unimplemented</hl> exception if it is executed.
It can be very handy, but probably a bit premature to learn so early in the <a href="/perl-tutorial">Perl Tutorial</a>.

<h2>Comments</h2>

Thanks for the nice tutorials! I'm attempting to write a small perl script and it seems my searches keep leading me to different pages here. It must have taken quite awhile to put all this together...

---
Thanks. It took a few years.

<hr>
Yes, thank you very much for this guide. It's quite helpful.
<hr>

Enjoying your website. Still more to come. Thanks for the great PERL tutorial.
<hr>

can you give me the example of if - elsif with -- this statement -- do you want to continue if yes then program ask same question like what is age. if we select no then program exist.
thanks in advance

