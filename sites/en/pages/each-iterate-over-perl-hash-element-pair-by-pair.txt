=title each - iterate over Perl hash elements pair-by-pair
=timestamp 2018-01-02T11:30:01
=indexes each
=status show
=author szabgab
=archive 1
=comments_disqus_enable 0

=abstract start

In most of the cases when we iterate over the <a href="/perl-hashes">elements of a hash</a>
we use the <a href="/search/keys">keys</a> function. At least that's my preferred method.

However, sometimes, epecially when the hash is big, we migh prefer to use the <hl>each</hl> function.

=abstract end

The use of <hl>each</hl> looks like this:

<include file="examples/each.pl">

On each iteration it fetches one of the key-value pairs and in this example we assign them to <hl>$k</hl>
and <hl>$v</hl> respectively.

There result is

<code>
abc  => 23
def  => 19
</code>

The actual order among the pairs is unpredictable.
If you run the above code several times you will see the order changes.

<h2>Each without a loop</h2>

While the most common use of <hl>each</hl> is in a loop, we can also use it stand-alone.
In this example we call <hl>each</hl> outside of a loop:

<include file="examples/loopless_each.pl">

Looking at the output you can see that the first two calls were successful and we got the two pairs of data.
The 3rd call to <hl>each</hl>, however, comes after the content of the hash was exhausted and thus the 3rd call
returns <a href="/undef-and-defined-in-perl">undef</a> to both key and value.

The fourth call to <hl>each</hl> starts iterating over the pairs again.

<code>
One
abc  => 23
Two
def  => 19
Three
Use of uninitialized value $k3 in concatenation (.) or string at examples/loopless_each.pl line 17.
Use of uninitialized value $v3 in concatenation (.) or string at examples/loopless_each.pl line 17.
  =>
Four
abc  => 23
</code>

<h2>Use of each() on hash after insertion without resetting hash iterator results in undefined behavior</h2>

<include file="examples/each_disaster.pl">

Unlike when we use <hl>keys</hl>, when we use <hl>each</hl> we <b>must not</b> change the hash in any way.
In the above code we adde a new key-value pair while we were iterating over the hash. I ran the above code several
times and each time I ran it I got a different output:

<code>
abc  => 23
Use of each() on hash after insertion without resetting hash iterator results in undefined behavior,
  Perl interpreter: ..
answer  => 42
def  => 19
</code>

<code>
abc  => 23
Use of each() on hash after insertion without resetting hash iterator results in undefined behavior,
  Perl interpreter: ..
</code>

<code>
abc  => 23
Use of each() on hash after insertion without resetting hash iterator results in undefined behavior,
  Perl interpreter: ..
abc  => 23
answer  => 42
def  => 19
</code>


So you should never change a hash while iterating over it using <hl>each</hl>.

<h2>Comments</h2>

Note that running "keys", "values" or simply iterating the hash in any way resets the internal iterator:

perl -MData::Dumper -wE '%h = (a => 12, b => 14); while (($k, $v) = each %h) { print "$k => $v\n"; warn Dumper \%h;}'

The above code loops infinitely.


<hr>

The one exception to the "do not change" rule is that you can safely delete the *current* element while iterating with each.

And you can always change any (existing) value.

<hr>

Would be good to show using void-context keys to reset the iterator where necessary, e.g.


while (my ($k, $v) = each %h) {
        say "$k  => $v";
        last;
}

say 'Play it again, Sam';
keys %h;
while (my ($k, $v) = each %h) {
        say "$k  => $v";
}


