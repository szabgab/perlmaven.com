=title Create skeleton PSGI application for the SCO project
=timestamp 2015-04-17T11:30:01
=indexes PSGI, Plack::Request
=tags screencast
=status show
=books search_cpan_org
=author szabgab
=comments_disqus_enable 0

=abstract start

I know it was short, but at this point I had enough from the testing. I like testing, but having lots of test withouth the real application (even if we are talking about a clone)
looks pointless. Besides, I had doubts about the reusability of <a href="/add-some-acceptance-tests">those tests</a>, so instead of writing more tests,
I switched gears, and started to write the web application.

I was wondering a bit which framework should I use for the project. The MetaCPAN Web is written using <a href="/catalyst">Catalyst</a>.
I know <a href="/dancer">Dancer</a> quite well. I have some experience with <a href="/mojolicious">Mojolicious</a>, but in the end I thought:
Let's not use any of these. Let's start by implementing everything in plain <a href="/psgi">PSGI</a>. It is both a learning
experience and at least at this point, the project does not need fancy things the frameworks might provide.

=abstract end

<screencast file="create-skeleton-psgi-application" youtube="tqzdNkX8GDo" />

The first thing I wanted to create is a skeleton for the PSGI-based web application.
Something simple like when we once <a href="/getting-started-with-psgi">started with PSGI</a>, but with more robust layout.

So I created the <a href="https://github.com/szabgab/MetaCPAN-SCO/blob/94db29297470e00357f347bcd0deb54717393454/app.psgi">>app.psgi</a> file in the root
of the project with the following content:

<code lang="perl">
#!/usr/bin/perl
use strict;
use warnings;

use lib 'lib';
use MetaCPAN::SCO;

my $app = MetaCPAN::SCO->run;
</code>

Instead of implementing the application in the app.psgi file, I am going to implement it in the MetaCPAN::SCO module and call its <hl>run</hl> method.

The interesting part of the code is in the <a href="https://github.com/szabgab/MetaCPAN-SCO/blob/94db29297470e00357f347bcd0deb54717393454/lib/MetaCPAN/SCO.pm">lib/MetaCPAN/SCO.pm</a> file.

The run method creates, and implicitly returns a reference to a subroutine.
(Assigning the anonymous subroution to the <hl>$app</hl> variable is not required here, but it will be useful later on.)

Inside the anonymous subroutine we create a <a href="https://metacpan.org/pod/Plack::Request">Plack::Request</a> object. Then using the
<hl>path_info</hl> method we can retreive part of the requested URL that does not contain the name of the machine. Just the path from <hl>/</hl>.
We can use this later to identify the various requests. (These are usually called "routes").

According to the <a href="http://plackperl.org/">specs of PSGI</a>, this anonymous subroution needs to return an array
reference with 3 values. The first one is the <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status code</a>. 200 means success, 404 means "Not Found".
The 2nd element is the header. In our case we return only the Content-type. When the <hl>path_info</hl> equals to '/' we return <hl>text/plain</hl> which means our response
will be interpreted as plain text. In all other cases we return 404 - Not Found and the Content-Type is <hl>text/html</hl>. There is no particular reason for the differences.
At this point the content (which is the string in the 3rd element of the array is plain text. So either Content-Type will work.

Later, when both will return HTML, we'll have to make sure that the Content-Type is <hl>text/html</hl> in both cases.

<code lang="perl">
package MetaCPAN::SCO;
use strict;
use warnings;

use Plack::Request;

our $VERSION = '0.01';

=head1 NAME

SCO - search.cpan.org clone

=cut

sub run {
    my $app = sub {
        my $env = shift;

        my $request = Plack::Request->new($env);
        if ($request->path_info eq '/') {
            return [ '200', [ 'Content-Type' => 'text/plain' ], ['Hello'], ];
        }

        return [ '404', [ 'Content-Type' => 'text/html' ], ['404 Not Found'], ];
    };
}


1;
</code>

Once we have this, we can launch the web-application by running <hl>plackup</hl> in the root directory of the project.
It will tell us we can browse to <a href="http://localhost:5000/">http://localhost:5000/</a>. Try that, and try adding something
to the end of the request to see the 404 error message.


To finish this change, we also need to add <a href="https://metacpan.org/pod/Plack::Request">Plack::Request</a> to the list of prerequisites.
This is the change we make in the Makefile.PL:

<code lang="perl">
    PREREQ_PM    => {
       'Plack::Request'   => '0',
    },
</code>

<code>
$ git add .
$ git commit -m "add app.psgi and some basic code to show a main page and to give 404 otherwise"
</code>

<a href="https://github.com/szabgab/MetaCPAN-SCO/commit/94db29297470e00357f347bcd0deb54717393454">commit</a>

