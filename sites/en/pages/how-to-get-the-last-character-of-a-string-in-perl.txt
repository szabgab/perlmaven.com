=title How to get the last character of a string in Perl?
=timestamp 2013-11-18T18:30:01
=indexes substr, chop
=status show
=author szabgab
=comments_disqus_enable 0

=abstract start

Getting the last character of a string is a special case of getting <a href="/string-functions-length-lc-uc-index-substr">any substring</a>.

=abstract end

<h2>substr</h2>

<hl>substr</hl> lets us get any <a href="/string-functions-length-lc-uc-index-substr">substring</a>.It gets 3 parameters:
<ol>
<li>The original string</li>
<li>offset - where does the substring start</li>
<li>length - how long is the substring</li>
</ol>

(There is also a 4th parameter, to <a href="/string-functions-length-lc-uc-index-substr">replace a substring</a>, but let's not discuss that now.)

Even the 3rd parameter from the above list, the <b>length</b>, is optional. If not given it means "till the end of the string".

The 2nd parameter can be either a positive number, then it is an offset from the left-hand side of the string. (Most people would call it the beginning of the string, but I know places where strings start on the right-hand side, so let's call it "left-hand side".)

If the 2nd parameter is a negative number, then it is an offset from the right-hand side of the string. (Or, as many people would call it, from the end of the string.)


<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'word';

say substr $text, -1;  # d
say $text;             # word
</code>


If the <hl>my $text = '';</hl> was an empty string then <hl>substr $text, -1;</hl> will
also return the empty string without giving any warning or error.

If the <hl>my $text;</hl> was <a href="/undef-and-defined-in-perl">undef</a>, we would get
a warning: <a href="/use-of-uninitialized-value">Use of uninitialized value $text in substr at ...</a>.


<h2>chop</h2>

Another, solution is to use the <hl>chop</hl> function. It is quite naughty.
I don't recommend this. Actually I think I never had a real world use of the
<hl>chop</hl> function. If I am not mistaken, it is a left over from the era
before chomp was added. 

It removes and returns the last character of a string:

<code lang="perl">
use strict;
use warnings;
use 5.010;

my $text = 'word';

say chop $text;  # d
say $text;       # wor
</code>

It could be used to extract, remove and compare the last character of a string,
but I can't think of a real use case when the "remove" part is useful.

If the original text was the empty string <hl>my $text = '';</hl>, chop would return
the empty string as well without giving any warning.

If the original text was <a href="/undef-and-defined-in-perl">undefined</a> as in
<hl>my $text;</hl> the call to <hl>chop $text;</hl> would give a warning:
<a href="/use-of-uninitialized-value">Use of uninitialized value $text in scalar chop at ...</a>.

<h2>Comments</h2>

if(substr $homeBase, -1 eq '/'){
chop $homeBase;
}

<hr>

I actually have what I think is a legitimate use of the `chop`
I need to process a string, but the processing needs to be disabled in between quotes:

my $str = q{this part requires processing "but not THIS part"; Toggle processing on..."but toggle it off for this"};

My solution is to split the string on the double-quote, process the even indices of the array, and join the array through a double-quote...
Works great, except for the double quote on the end, which will get dropped with the simple algorithm.
The solution is to add a space to my string, and chop it afterwards:

my @quoted_str = split qr/"|$/, $str . q{ };
my $i = 0;
while ( $i le $#quoted_str ) {

# Escape any parenthesis in the non-quoted substrings
$quoted_str[$i] =~ <my_processing_stuff>;
$i += 2;
}

# Join the processed substrings back together
$str = join q{"}, @quoted_str;
chop $str; # <====chop gets it done===

Unless there is a more elegant way to process a string, except for the quoted substrings...

